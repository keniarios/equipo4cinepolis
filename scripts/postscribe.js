(function () { function doNothing() { } var OPTIONS = { afterAsync: doNothing, afterDequeue: doNothing, afterStreamStart: doNothing, afterWrite: doNothing, beforeEnqueue: doNothing, beforeWrite: function (str) { return str }, done: doNothing, error: function (e) { throw e }, releaseAsync: false }; var global = this; var UNDEFINED = void 0; function existy(thing) { return thing !== UNDEFINED && thing !== null } if (global.postscribe) { return } var DEBUG_CHUNK = false; var slice = Array.prototype.slice; function isFunction(x) { return 'function' === typeof x } function each(arr, fn, _this) { var i, len = (arr && arr.length) || 0; for (i = 0; i < len; i++) { fn.call(_this, arr[i], i) } } function eachKey(obj, fn, _this) { var key; for (key in obj) { if (obj.hasOwnProperty(key)) { fn.call(_this, key, obj[key]) } } } function set(obj, props) { eachKey(props, function (key, value) { obj[key] = value }); return obj } function defaults(options, _defaults) { options = options || {}; eachKey(_defaults, function (key, val) { if (!existy(options[key])) { options[key] = val } }); return options } function toArray(obj) { try { return slice.call(obj) } catch (e) { var ret = []; each(obj, function (val) { ret.push(val) }); return ret } } var last = function (array) { return array[array.length - 1] }; function isScript(tok) { return !tok || !('tagName' in tok) ? !1 : !!~tok.tagName.toLowerCase().indexOf('script') } function isStyle(tok) { return !tok || !('tagName' in tok) ? !1 : !!~tok.tagName.toLowerCase().indexOf('style') } var WriteStream = (function () { var BASEATTR = 'data-ps-'; function data(el, name, value) { var attr = BASEATTR + name; if (arguments.length === 2) { var val = el.getAttribute(attr); return !existy(val) ? val : String(val) } else if (existy(value) && value !== '') { el.setAttribute(attr, value) } else { el.removeAttribute(attr) } } function WriteStream(root, options) { var doc = root.ownerDocument; set(this, { root: root, options: options, win: doc.defaultView || doc.parentWindow, doc: doc, parser: htmlParser('', { autoFix: true }), actuals: [root], proxyHistory: '', proxyRoot: doc.createElement(root.nodeName), scriptStack: [], writeQueue: [] }); data(this.proxyRoot, 'proxyof', 0) } WriteStream.prototype.write = function () { [].push.apply(this.writeQueue, arguments); var arg; while (!this.deferredRemote && this.writeQueue.length) { arg = this.writeQueue.shift(); if (isFunction(arg)) { this.callFunction(arg) } else { this.writeImpl(arg) } } }; WriteStream.prototype.callFunction = function (fn) { var tok = { type: 'function', value: fn.name || fn.toString() }; this.onScriptStart(tok); fn.call(this.win, this.doc); this.onScriptDone(tok) }; WriteStream.prototype.writeImpl = function (html) { this.parser.append(html); var tok, tokens = [], script, style; while ((tok = this.parser.readToken()) && !(script = isScript(tok)) && !(style = isStyle(tok))) { tokens.push(tok) } this.writeStaticTokens(tokens); if (script) { this.handleScriptToken(tok) } if (style) { this.handleStyleToken(tok) } }; WriteStream.prototype.writeStaticTokens = function (tokens) { var chunk = this.buildChunk(tokens); if (!chunk.actual) { return } chunk.html = this.proxyHistory + chunk.actual; this.proxyHistory += chunk.proxy; this.proxyRoot.innerHTML = chunk.html; if (DEBUG_CHUNK) { chunk.proxyInnerHTML = this.proxyRoot.innerHTML } this.walkChunk(); if (DEBUG_CHUNK) { chunk.actualInnerHTML = this.root.innerHTML } return chunk }; WriteStream.prototype.buildChunk = function (tokens) { var nextId = this.actuals.length, raw = [], actual = [], proxy = []; each(tokens, function (tok) { raw.push(tok.text); if (tok.attrs) { if (!(/^noscript$/i).test(tok.tagName)) { var id = nextId++; actual.push(tok.text.replace(/(\/?>)/, ' ' + BASEATTR + 'id=' + id + ' $1')); if (tok.attrs.id !== 'ps-script' && tok.attrs.id !== 'ps-style') { proxy.push(tok.type === 'atomicTag' ? '' : '<' + tok.tagName + ' ' + BASEATTR + 'proxyof=' + id + (tok.unary ? ' />' : '>')) } } } else { actual.push(tok.text); proxy.push(tok.type === 'endTag' ? tok.text : '') } }); return { tokens: tokens, raw: raw.join(''), actual: actual.join(''), proxy: proxy.join('') } }; WriteStream.prototype.walkChunk = function () { var node, stack = [this.proxyRoot]; while (existy(node = stack.shift())) { var isElement = node.nodeType === 1; var isProxy = isElement && data(node, 'proxyof'); if (!isProxy) { if (isElement) { this.actuals[data(node, 'id')] = node; data(node, 'id', null) } var parentIsProxyOf = node.parentNode && data(node.parentNode, 'proxyof'); if (parentIsProxyOf) { this.actuals[parentIsProxyOf].appendChild(node) } } stack.unshift.apply(stack, toArray(node.childNodes)) } }; WriteStream.prototype.handleScriptToken = function (tok) { var remainder = this.parser.clear(); if (remainder) { this.writeQueue.unshift(remainder) } tok.src = tok.attrs.src || tok.attrs.SRC; if (tok.src && this.scriptStack.length) { this.deferredRemote = tok } else { this.onScriptStart(tok) } var _this = this; this.writeScriptToken(tok, function () { _this.onScriptDone(tok) }) }; WriteStream.prototype.handleStyleToken = function (tok) { var remainder = this.parser.clear(); if (remainder) { this.writeQueue.unshift(remainder) } tok.type = tok.attrs.type || tok.attrs.TYPE || 'text/css'; this.writeStyleToken(tok); if (remainder) { this.write() } }; WriteStream.prototype.writeStyleToken = function (tok) { var el = this.buildStyle(tok); this.insertStyle(el); if (tok.content) { if (el.styleSheet && !el.sheet) { el.styleSheet.cssText = tok.content } else { el.appendChild(this.doc.createTextNode(tok.content)) } } }; WriteStream.prototype.buildStyle = function (tok) { var el = this.doc.createElement(tok.tagName); el.setAttribute('type', tok.type); eachKey(tok.attrs, function (name, value) { el.setAttribute(name, value) }); return el }; WriteStream.prototype.insertStyle = function (el) { this.writeImpl('<span id="ps-style"/>'); var cursor = this.doc.getElementById('ps-style'); cursor.parentNode.replaceChild(el, cursor) }; WriteStream.prototype.onScriptStart = function (tok) { tok.outerWrites = this.writeQueue; this.writeQueue = []; this.scriptStack.unshift(tok) }; WriteStream.prototype.onScriptDone = function (tok) { if (tok !== this.scriptStack[0]) { this.options.error({ message: 'Bad script nesting or script finished twice' }); return } this.scriptStack.shift(); this.write.apply(this, tok.outerWrites); if (!this.scriptStack.length && this.deferredRemote) { this.onScriptStart(this.deferredRemote); this.deferredRemote = null } }; WriteStream.prototype.writeScriptToken = function (tok, done) { var el = this.buildScript(tok); var asyncRelease = this.shouldRelease(el); var afterAsync = this.options.afterAsync; if (tok.src) { el.src = tok.src; this.scriptLoadHandler(el, !asyncRelease ? function () { done(); afterAsync() } : afterAsync) } try { this.insertScript(el); if (!tok.src || asyncRelease) { done() } } catch (e) { this.options.error(e); done() } }; WriteStream.prototype.buildScript = function (tok) { var el = this.doc.createElement(tok.tagName); eachKey(tok.attrs, function (name, value) { el.setAttribute(name, value) }); if (tok.content) { el.text = tok.content } return el }; WriteStream.prototype.insertScript = function (el) { this.writeImpl('<span id="ps-script"/>'); var cursor = this.doc.getElementById('ps-script'); cursor.parentNode.replaceChild(el, cursor) }; WriteStream.prototype.scriptLoadHandler = function (el, done) { function cleanup() { el = el.onload = el.onreadystatechange = el.onerror = null } var error = this.options.error; function success() { cleanup(); done(); $("#publiboardTop div").removeAttr("style"); $("#publiboardTop object").removeAttr("style"); $("#publiboardTop img").removeAttr("style") } function failure(err) { cleanup(); error(err); done() } set(el, { onload: function () { success() }, onreadystatechange: function () { if (/^(loaded|complete)$/.test(el.readyState)) { success() } }, onerror: function () { failure({ message: 'remote script failed ' + el.src }) } }) }; WriteStream.prototype.shouldRelease = function (el) { var isScript = /^script$/i.test(el.nodeName); return !isScript || !!(this.options.releaseAsync && el.src && el.hasAttribute('async')) }; return WriteStream }()); global.postscribe = (function () { var nextId = 0; var queue = []; var active = null; function nextStream() { var args = queue.shift(); var options; if (args) { options = last(args); options.afterDequeue(); args.stream = runStream.apply(null, args); options.afterStreamStart() } } function runStream(el, html, options) { active = new WriteStream(el, options); active.id = nextId++; active.name = options.name || active.id; postscribe.streams[active.name] = active; var doc = el.ownerDocument; var stash = { close: doc.close, open: doc.open, write: doc.write, writeln: doc.writeln }; function write(str) { str = options.beforeWrite(str); active.write(str); options.afterWrite(str) } set(doc, { close: doNothing, open: doNothing, write: function () { return write(toArray(arguments).join('')) }, writeln: function () { return write(toArray(arguments).join('') + '\n') } }); var oldOnError = active.win.onerror || doNothing; active.win.onerror = function (msg, url, line) { options.error({ msg: msg + ' - ' + url + ':' + line }); oldOnError.apply(active.win, arguments) }; active.write(html, function streamDone() { set(doc, stash); active.win.onerror = oldOnError; options.done(); active = null; nextStream() }); return active } function postscribe(el, html, options) { if (isFunction(options)) { options = { done: options } } options = defaults(options, OPTIONS); el = (/^#/).test(el) ? global.document.getElementById(el.substr(1)) : el.jquery ? el[0] : el; var args = [el, html, options]; el.postscribe = { cancel: function () { if (args.stream) { args.stream.abort() } else { args[1] = doNothing } } }; options.beforeEnqueue(args); queue.push(args); if (!active) { nextStream() } return el.postscribe } return set(postscribe, { streams: {}, queue: queue, WriteStream: WriteStream }) }()) }());